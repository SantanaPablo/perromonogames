@page "/login"
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@using MiJuegosWeb.Client.Services
@inject CustomAuthenticationStateProvider CustomAuth
@using MiJuegosWeb.Domain.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text.Json

<h3>Iniciar Sesión</h3>

@if (!isAuthenticated)
{
    <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Usuario:</label>
            <InputText class="form-control" @bind-Value="loginRequest.Username" />
            <ValidationMessage For="@(() => loginRequest.Username)" />
        </div>

        <div class="mb-3">
            <label>Contraseña:</label>
            <InputText type="password" class="form-control" @bind-Value="loginRequest.Password" />
            <ValidationMessage For="@(() => loginRequest.Password)" />
        </div>

        <button class="btn btn-primary">Iniciar Sesión</button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </EditForm>
    
}
else
{
    <p>Redirigiendo...</p>
}

@code {
    private LoginRequestDto loginRequest = new();
    private string? errorMessage;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            isAuthenticated = true;
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        Console.WriteLine("🔐 Entró a HandleLogin");

        try
        {
            Console.WriteLine($"📤 Enviando login: {loginRequest.Username}, {loginRequest.Password}");
            var response = await Http.PostAsJsonAsync("api/Auth/login", loginRequest);
            var responseString = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"📥 Respuesta cruda: {responseString}");
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            var authResponse = await response.Content.ReadFromJsonAsync<AuthResponseDto>(options);


            
            Console.WriteLine($"✅ IsSuccess: {authResponse?.IsSuccess}, Token: {authResponse?.Token}");

            if (response.IsSuccessStatusCode && authResponse?.IsSuccess == true)
            {
                var cleanedToken = authResponse.Token!.Trim('"');
                Console.WriteLine($"🧼 Token limpio: {cleanedToken}");

                await LocalStorage.SetItemAsync("authToken", cleanedToken);
                CustomAuth.MarkUserAsAuthenticated(cleanedToken);



                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = authResponse?.Message ?? "Credenciales inválidas.";
                Console.WriteLine($"❌ Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"🔥 Excepción: {ex.Message}");
        }
    }

}
